# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
from os.path import abspath, dirname, join, isdir
import sys

SETUP_PATH = abspath(dirname(dirname(__file__)))
sys.path.insert(0, SETUP_PATH)

# Get Package infos
from setup import PACKAGE_INFO, BUILD_SPHINX_REQUIRES, REST_API_DST
SPHINX_INFO = PACKAGE_INFO['command_options']['build_sphinx']

# ReadTheDocs: Build package and install dependencies before anything
if os.environ.get('READTHEDOCS'):
    from subprocess import Popen
    commands = (
        'python -m pip install %s' % (' '.join(BUILD_SPHINX_REQUIRES)),
        'python -m pip install -e .[all]'
    )
    current_dir = os.getcwd()
    os.chdir(SETUP_PATH)
    try:
        for command in commands:
            Popen(command, shell=True).communicate()
    finally:
        os.chdir(current_dir)

    # Mock _swagger_client since Java not available on ReadTheDocs
    try:
        os.makedirs(REST_API_DST)
    except OSError:
        if not isdir(REST_API_DST):
            raise
    with open(join(REST_API_DST, '__init__.py'), 'wt') as rest_init:
        rest_init.write('')

# Import recommonmark extension for Markdown support
from recommonmark.parser import CommonMarkParser
from recommonmark.transform import AutoStructify


# -- Dynamically generate documentation for "accelerator.conf" file ----------

def md_from_conf(conf_path, md_path):
    """
    Generate a markdown file from a properly formatted ".conf" file.

    ".conf" file needs to use ";" as comment symbol.
    Comments can be written in markdown format.

    Args:
        conf_path: Path to ".conf" file.
        md_path: Path to ".md" file
    """
    # Read ".conf"
    with open(conf_path, 'rt') as conf_file:
        content = conf_file.readlines()

    # Convert to markdown
    for index, line in enumerate(content):
        line = line.rstrip()

        # Skip blank lines
        if not line:
            pass

        # Remove comments marks
        elif line.startswith(';'):
            line = line.lstrip(';')

        # Remove [] from section
        elif line.startswith('['):
            line = line.strip('[]')

        # Quote parameters lines
        else:
            try:
                prev_line = content[index - 1]
            except IndexError:
                prev_line = ''

            if '```' in prev_line:
                # Multi line quote
                content[index - 1] = prev_line.rstrip('\n`')
                line = '%s\n```' % line
            else:
                # Single line quote
                line = '```\n%s\n```' % line

        content[index] = line

    # Save ".md"
    with open(md_path, 'wt') as md_file:
        md_file.write('\n'.join(
            ["<!-- WARNING: This file is autogenerated, do not edit it manually -->\n"] + content))


md_from_conf('../acceleratorAPI/accelerator.conf', 'configuration_file.md')

# -- Project information -----------------------------------------------------

project = SPHINX_INFO['project'][1]
copyright = SPHINX_INFO['copyright'][1]
author = PACKAGE_INFO['author']

# The short X.Y version
version = SPHINX_INFO['version'][1]
# The full version, including alpha/beta/rc tags.
release = SPHINX_INFO['release'][1]


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.coverage',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# Add Markdown support
source_parsers = {
   '.md': CommonMarkParser,
}

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'AccelizeAcceleratorAPIdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, '%s.tex' % project, '%s Documentation' % project,
     author, 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, PACKAGE_INFO['name'], '%s Documentation' % project,
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, project, '%s Documentation' % project,
     author, project, PACKAGE_INFO['description'],
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------
def setup(app):
    """
    Setup recommonmark

    Args:
        app: sphinx generated
    """
    # recommonmark
    app.add_config_value('recommonmark_config', {
        'enable_math': False, 'enable_inline_math': False,
        }, True)
    app.add_transform(AutoStructify)
