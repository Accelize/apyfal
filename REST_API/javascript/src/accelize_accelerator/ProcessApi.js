/**
 * Accelize Accelerator WS
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2003', 'model/InlineResponse2002', 'model/InlineResponse2004'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2003'), require('../model/InlineResponse2002'), require('../model/InlineResponse2004'));
  } else {
    // Browser globals (root is window)
    if (!root.AccelizeAcceleratorWs) {
      root.AccelizeAcceleratorWs = {};
    }
    root.AccelizeAcceleratorWs.ProcessApi = factory(root.AccelizeAcceleratorWs.ApiClient, root.AccelizeAcceleratorWs.InlineResponse2003, root.AccelizeAcceleratorWs.InlineResponse2002, root.AccelizeAcceleratorWs.InlineResponse2004);
  }
}(this, function(ApiClient, InlineResponse2003, InlineResponse2002, InlineResponse2004) {
  'use strict';

  /**
   * Process service.
   * @module accelize_accelerator/ProcessApi
   * @version 1.0
   */

  /**
   * Constructs a new ProcessApi. 
   * @alias module:accelize_accelerator/ProcessApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the processCreate operation.
     * @callback module:accelize_accelerator/ProcessApi~processCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v1.0/process/
     * Create a new process instance.
     * @param {String} configuration Id of the configuration to use for this process
     * @param {Object} opts Optional parameters
     * @param {String} opts.parameters All parameters need for the excution in JSON format : {     \&quot;AcceleratorParam1\&quot;:\&quot;value1\&quot;,    \&quot;AcceleratorParam2\&quot;:\&quot;value2\&quot;,    \&quot;AcceleratorParam3\&quot;:\&quot;value3\&quot;}
     * @param {File} opts.datafile If needed, file to be processed by the accelerator.
     * @param {module:accelize_accelerator/ProcessApi~processCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.processCreate = function(configuration, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'configuration' is set
      if (configuration == undefined || configuration == null) {
        throw "Missing the required parameter 'configuration' when calling processCreate";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'parameters': opts['parameters'],
        'configuration': configuration,
        'datafile': opts['datafile']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = [];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/v1.0/process/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the processDelete operation.
     * @callback module:accelize_accelerator/ProcessApi~processDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v1.0/process/{id}/
     * @param {Integer} id A unique integer value identifying this process execution.
     * @param {module:accelize_accelerator/ProcessApi~processDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.processDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling processDelete";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1.0/process/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the processList operation.
     * @callback module:accelize_accelerator/ProcessApi~processListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v1.0/process/
     * Returns a list of all process instance requested in the system.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page A page number within the paginated result set.
     * @param {module:accelize_accelerator/ProcessApi~processListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.processList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/v1.0/process/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the processRead operation.
     * @callback module:accelize_accelerator/ProcessApi~processReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v1.0/process/{id}/
     * Return the given process instance.
     * @param {Integer} id A unique integer value identifying this process execution.
     * @param {module:accelize_accelerator/ProcessApi~processReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.processRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling processRead";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/v1.0/process/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
