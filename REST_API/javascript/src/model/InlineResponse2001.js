/**
 * Accelize Accelerator WS
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AccelizeAcceleratorWs) {
      root.AccelizeAcceleratorWs = {};
    }
    root.AccelizeAcceleratorWs.InlineResponse2001 = factory(root.AccelizeAcceleratorWs.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The InlineResponse2001 model module.
   * @module model/InlineResponse2001
   * @version 1.0
   */

  /**
   * Constructs a new <code>InlineResponse2001</code>.
   * @alias module:model/InlineResponse2001
   * @class
   */
  var exports = function() {
    var _this = this;








  };

  /**
   * Constructs a <code>InlineResponse2001</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InlineResponse2001} obj Optional instance to populate.
   * @return {module:model/InlineResponse2001} The populated <code>InlineResponse2001</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('inerror')) {
        obj['inerror'] = ApiClient.convertToType(data['inerror'], 'Boolean');
      }
      if (data.hasOwnProperty('processed_date')) {
        obj['processed_date'] = ApiClient.convertToType(data['processed_date'], 'String');
      }
      if (data.hasOwnProperty('parametersresult')) {
        obj['parametersresult'] = ApiClient.convertToType(data['parametersresult'], 'String');
      }
      if (data.hasOwnProperty('errorcode')) {
        obj['errorcode'] = ApiClient.convertToType(data['errorcode'], 'String');
      }
      if (data.hasOwnProperty('processed')) {
        obj['processed'] = ApiClient.convertToType(data['processed'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * 
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * 
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * 
   * @member {Boolean} inerror
   */
  exports.prototype['inerror'] = undefined;
  /**
   * 
   * @member {String} processed_date
   */
  exports.prototype['processed_date'] = undefined;
  /**
   * 
   * @member {String} parametersresult
   */
  exports.prototype['parametersresult'] = undefined;
  /**
   * 
   * @member {String} errorcode
   */
  exports.prototype['errorcode'] = undefined;
  /**
   * 
   * @member {Boolean} processed
   */
  exports.prototype['processed'] = undefined;



  return exports;
}));


