# coding: utf-8

"""
    Accelize Accelerator WS

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2003Results(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, datafile=None, parameters=None, id=None, url=None, inerror=None, parametersresult=None, processed_date=None, datafileresult=None, processed=None, configuration=None):
        """
        InlineResponse2003Results - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'datafile': 'str',
            'parameters': 'str',
            'id': 'str',
            'url': 'str',
            'inerror': 'bool',
            'parametersresult': 'str',
            'processed_date': 'str',
            'datafileresult': 'str',
            'processed': 'bool',
            'configuration': 'str'
        }

        self.attribute_map = {
            'datafile': 'datafile',
            'parameters': 'parameters',
            'id': 'id',
            'url': 'url',
            'inerror': 'inerror',
            'parametersresult': 'parametersresult',
            'processed_date': 'processed_date',
            'datafileresult': 'datafileresult',
            'processed': 'processed',
            'configuration': 'configuration'
        }

        self._datafile = datafile
        self._parameters = parameters
        self._id = id
        self._url = url
        self._inerror = inerror
        self._parametersresult = parametersresult
        self._processed_date = processed_date
        self._datafileresult = datafileresult
        self._processed = processed
        self._configuration = configuration

    @property
    def datafile(self):
        """
        Gets the datafile of this InlineResponse2003Results.
        If needed, file to be processed by the accelerator.

        :return: The datafile of this InlineResponse2003Results.
        :rtype: str
        """
        return self._datafile

    @datafile.setter
    def datafile(self, datafile):
        """
        Sets the datafile of this InlineResponse2003Results.
        If needed, file to be processed by the accelerator.

        :param datafile: The datafile of this InlineResponse2003Results.
        :type: str
        """

        self._datafile = datafile

    @property
    def parameters(self):
        """
        Gets the parameters of this InlineResponse2003Results.
        All parameters need for the excution in JSON format : {     \"AcceleratorParam1\":\"value1\",    \"AcceleratorParam2\":\"value2\",    \"AcceleratorParam3\":\"value3\"}

        :return: The parameters of this InlineResponse2003Results.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this InlineResponse2003Results.
        All parameters need for the excution in JSON format : {     \"AcceleratorParam1\":\"value1\",    \"AcceleratorParam2\":\"value2\",    \"AcceleratorParam3\":\"value3\"}

        :param parameters: The parameters of this InlineResponse2003Results.
        :type: str
        """

        self._parameters = parameters

    @property
    def id(self):
        """
        Gets the id of this InlineResponse2003Results.
        

        :return: The id of this InlineResponse2003Results.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse2003Results.
        

        :param id: The id of this InlineResponse2003Results.
        :type: str
        """

        self._id = id

    @property
    def url(self):
        """
        Gets the url of this InlineResponse2003Results.
        

        :return: The url of this InlineResponse2003Results.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this InlineResponse2003Results.
        

        :param url: The url of this InlineResponse2003Results.
        :type: str
        """

        self._url = url

    @property
    def inerror(self):
        """
        Gets the inerror of this InlineResponse2003Results.
        

        :return: The inerror of this InlineResponse2003Results.
        :rtype: bool
        """
        return self._inerror

    @inerror.setter
    def inerror(self, inerror):
        """
        Sets the inerror of this InlineResponse2003Results.
        

        :param inerror: The inerror of this InlineResponse2003Results.
        :type: bool
        """

        self._inerror = inerror

    @property
    def parametersresult(self):
        """
        Gets the parametersresult of this InlineResponse2003Results.
        

        :return: The parametersresult of this InlineResponse2003Results.
        :rtype: str
        """
        return self._parametersresult

    @parametersresult.setter
    def parametersresult(self, parametersresult):
        """
        Sets the parametersresult of this InlineResponse2003Results.
        

        :param parametersresult: The parametersresult of this InlineResponse2003Results.
        :type: str
        """

        self._parametersresult = parametersresult

    @property
    def processed_date(self):
        """
        Gets the processed_date of this InlineResponse2003Results.
        

        :return: The processed_date of this InlineResponse2003Results.
        :rtype: str
        """
        return self._processed_date

    @processed_date.setter
    def processed_date(self, processed_date):
        """
        Sets the processed_date of this InlineResponse2003Results.
        

        :param processed_date: The processed_date of this InlineResponse2003Results.
        :type: str
        """

        self._processed_date = processed_date

    @property
    def datafileresult(self):
        """
        Gets the datafileresult of this InlineResponse2003Results.
        If needed, file  processed by the accelerator.

        :return: The datafileresult of this InlineResponse2003Results.
        :rtype: str
        """
        return self._datafileresult

    @datafileresult.setter
    def datafileresult(self, datafileresult):
        """
        Sets the datafileresult of this InlineResponse2003Results.
        If needed, file  processed by the accelerator.

        :param datafileresult: The datafileresult of this InlineResponse2003Results.
        :type: str
        """

        self._datafileresult = datafileresult

    @property
    def processed(self):
        """
        Gets the processed of this InlineResponse2003Results.
        

        :return: The processed of this InlineResponse2003Results.
        :rtype: bool
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """
        Sets the processed of this InlineResponse2003Results.
        

        :param processed: The processed of this InlineResponse2003Results.
        :type: bool
        """

        self._processed = processed

    @property
    def configuration(self):
        """
        Gets the configuration of this InlineResponse2003Results.
        Id of the configuration to use for this process

        :return: The configuration of this InlineResponse2003Results.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this InlineResponse2003Results.
        Id of the configuration to use for this process

        :param configuration: The configuration of this InlineResponse2003Results.
        :type: str
        """

        self._configuration = configuration

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
