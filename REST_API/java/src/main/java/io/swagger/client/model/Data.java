/**
 * Accelize Accelerator WS
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;


/**
 * Data
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2018-02-05T16:58:51.648+01:00")
public class Data   {
  @SerializedName("datafile")
  private File datafile = null;

  @SerializedName("configuration")
  private String _configuration = null;

  @SerializedName("parameters")
  private String parameters = null;

  public Data datafile(File datafile) {
    this.datafile = datafile;
    return this;
  }

   /**
   * If needed, file to be processed by the accelerator.
   * @return datafile
  **/
  @ApiModelProperty(example = "null", value = "If needed, file to be processed by the accelerator.")
  public File getDatafile() {
    return datafile;
  }

  public void setDatafile(File datafile) {
    this.datafile = datafile;
  }

  public Data _configuration(String _configuration) {
    this._configuration = _configuration;
    return this;
  }

   /**
   * Id of the configuration to use for this process
   * @return _configuration
  **/
  @ApiModelProperty(example = "null", required = true, value = "Id of the configuration to use for this process")
  public String getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(String _configuration) {
    this._configuration = _configuration;
  }

  public Data parameters(String parameters) {
    this.parameters = parameters;
    return this;
  }

   /**
   * All parameters need for the excution in JSON format : {     \"AcceleratorParam1\":\"value1\",    \"AcceleratorParam2\":\"value2\",    \"AcceleratorParam3\":\"value3\"}
   * @return parameters
  **/
  @ApiModelProperty(example = "null", value = "All parameters need for the excution in JSON format : {     \"AcceleratorParam1\":\"value1\",    \"AcceleratorParam2\":\"value2\",    \"AcceleratorParam3\":\"value3\"}")
  public String getParameters() {
    return parameters;
  }

  public void setParameters(String parameters) {
    this.parameters = parameters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Data data = (Data) o;
    return Objects.equals(this.datafile, data.datafile) &&
        Objects.equals(this._configuration, data._configuration) &&
        Objects.equals(this.parameters, data.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datafile, _configuration, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Data {\n");
    
    sb.append("    datafile: ").append(toIndentedString(datafile)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

